from flask import Flask, render_template, request
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
app = Flask(__name__) 

data = {
    "時間": ["06:00〜13:15", "07:00〜14:00", "08:00〜15:00", "06:00〜13:15", "07:00〜14:00", "15:58〜15:58", "08:36〜08:36", "6:30〜11:30", "19:16〜19:16", "11:00〜12:42", "14:47〜14:47", "10:00〜10:00", "15:00〜18:00", "14:30〜16:05", "15:25〜15:25", "08:24〜08:24", "12:00〜12:00", "12:43〜12:43", "01:05〜01:05", "00:00〜04:00", "17:12〜17:12", "12:16〜12:16", "15:00〜19:00", "17:22〜17:22", "08:22〜08:22", "07:48〜13:41", "12:23〜12:23", "14:47〜14:47", "16:50〜16:50", "11:38〜11:51", "11:38〜11:51", "09:30〜14:00", "16:04〜16:04", "12:13〜12:13", "04:00〜05:53", "17:19〜17:19", "17:47〜17:47", "05:36〜05:36", "18:35〜18:35", "07:00〜07:00", "16:59〜16:59", "21:42〜21:42", "17:17〜17:17", "17:04〜17:04", "08:36〜09:48", "15:00〜15:00", "08:22〜09:33", "18:38〜18:38", "06:25〜08:47", "03:00〜03:00",],
    "釣果": [1, 2, 3, 2, 1, 1, 1, 1, 3, 1, 22, 26, 301, 3, 5, 5, 31, 1, 1, 1, 1, 5, 2, 1, 1, 1, 13, 1, 1, 41, 1, 4, 1, 5, 15, 1, 2, 1, 1, 2, 1, 1, 1, 101, 4, 2, 1, 1, 1, 1,],
    "気温": [25.0, 26.0, 27.0, 24.5, 25.5 , 20.0, 28.0, 28.0, 30.0, 29.0, 34.0, 32.0, 32.0, 34.0, 34.0, 28.0, 34.0, 34.0, 29.0, 29.0, 33.0, 33.0, 31.0, 33.0, 32.0, 23.0, 32.0, 32.0, 32.0, 33.0, 29.0, 30.0, 33.0, 32.0, 32.0, 27.0, 11.0, 32.0, 27.0, 30.0, 27.0, 34.0, 27.0, 34.0, 26.0, 33.0, 29.0, 31.0, 30.0, 29.0,],
    "風向": ["北", "東", "西", "北", "東", "南東" , "北北東", "北東", "南南東", "北北東", "東北東", "東", "南南東", "南東", "南東", "東", "東", "東", "南", "南", "南", "南", "北東", "南東", "南南西", "南", "北東", "東南東", "南", "東北東", "東北東", "南東", "南南東", "東南東", "北東", "北北西", "南南東", "南南東", "南", "東南東", "東南東", "南東", "東南東", "東南東", "東北東", "東南東", "北北西", "南西", "北", "南",],
    "風速": [1.4, 1.6, 1.2, 1.3, 1.5, 6.1, 1.7, 3.1, 4.7, 2.8, 1.4, 1.9, 4.2, 5.8, 5.8, 1.7, 1.1, 1.1, 3.3, 4.7, 6.1, 4.7, 5.3, 3.3, 5.8, 3.3, 1.4, 1.4, 5.8, 3.3, 2.5, 1.7, 4.7, 1.7, 2.5, 3.9, 5.6, 1.7, 5.0, 1.4, 3.6, 3.9, 3.6, 3.9, 2.8, 4.7, 2.2, 5.0, 2.5, 0.8,],
    "気圧": [1010, 1012, 1013, 1009, 1011 , 1007, 1011, 1010, 1009, 1010, 1008, 1009, 1005, 1005, 1005, 1008, 1006, 1006, 1007, 1007, 1006, 1006, 998, 1001, 1008, 1004, 1002, 1006, 1006, 1006, 1005, 1006, 1002, 1003, 1005, 1022, 1006, 1008, 1007, 1009, 1005, 1008, 1005, 1004, 1007, 1004, 1002, 1000, 1007, 1016,],
    "潮": ["小潮", "中潮", "大潮", "小潮", "中潮", "若潮", "大潮", "大潮", "大潮", "大潮", "大潮", "大潮", "中潮", "中潮", "中潮", "中潮", "中潮", "中潮", "中潮", "若潮", "若潮", "長潮", "小潮", "中潮", "大潮", "中潮", "中潮", "中潮", "大潮", "中潮", "中潮", "大潮", "中潮", "中潮", "中潮", "中潮", "大潮", "大潮", "大潮", "大潮", "中潮", "中潮", "中潮", "中潮", "中潮", "中潮", "若潮", "長潮", "小潮", "小潮",],
    "潮の高さ": [22.6, 24.0, 26.0, 22.0, 23.5, 25.0, 14.7, 13.7, 13.7, 13.7, 13.7, 13.7, 10.7, 10.7, 10.7, 10.7, 10.7, 10.7, 10.7, 9.7, 9.7, 8.7, 5.7, 3.7, 14.6, 2.2, 3.7, 27.2, 0.7, 2.7, 2.7, 0.7, 2.7, 2.7, 2.7, 3.7, 28.2, 29.2, 28.2, 28.2, 27.2, 27.2, 27.2, 27.2, 27.2, 26.2, 25.2, 24.2, 23.2, 21.2,]
}

# データフレームを作成
df = pd.DataFrame(data)

# 特徴量とターゲットに分ける
X = df.drop(columns=["釣果"])
y = df["釣果"]

# カテゴリカルデータをダミー変数に変換
X = pd.get_dummies(X, drop_first=True)

# 訓練データとテストデータに分割
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# モデルの構築と訓練
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

@app.route('/')
def hello_world():
    return render_template('index.html')


   

    

@app.route('/calc', methods=['POST'])
def calc():
    kiatu = request.form['kiatu']
    time = request.form['time']
    wing = request.form['wing']
    huko = request.form['huko']
    shio = request.form['shio']
    temperture = request.form['temperture']
    shioshio = request.form['shioshio']


    new_data = {
    "時間": [time],
    "気温": [temperture],
    "風向": [huko],
    "風速": [wing],
    "気圧": [kiatu],
    "潮": [shioshio],
    "潮の高さ": [shio]
    } 

    new_df = pd.DataFrame(new_data)

    # トレーニング時と同じダミー変数を適用
    new_df = pd.get_dummies(new_df, drop_first=True)

    # トレーニング時の全ての特徴量を揃える
    new_df = new_df.reindex(columns=X_train.columns, fill_value=0)



    result = model.predict(new_df)
    print(new_df)
    print(result)
    return render_template('index.html',result = result )

if __name__ == "__main__":
    app.run(debug=True)
